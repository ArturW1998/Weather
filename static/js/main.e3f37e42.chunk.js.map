{"version":3,"sources":["serviceWorker.js","constants/index.js","utils/index.js","components/info.js","components/form.js","components/weatherinfo.js","containers/Weather.js","index.js"],"names":["Boolean","window","location","hostname","match","Constants","BASE_PATH","WEATHER_PATH","WEATHER_PARAM","API_ID","API_KEY","UNITS_NAME","UNITS_PARAM","timeConversion","sec","date","Date","hours","getHours","modifiedMinutes","concat","getMinutes","modifiedSeconds","getSeconds","minutes","substr","seconds","tempConversion","temp","initialState","Object","classCallCheck","this","undefined","city","country","sunset","sunrise","pressure","error","loading","Info","react_default","a","createElement","Form","_ref","weatherWethod","onSubmit","type","name","placeholder","required","WeatherInfo","className","role","Weather","state","gettingWeather","_callee","e","api_url","data","_data$main","_data$sys","sunset_date","sunrise_date","modified_temp","message","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","_this","setState","objectSpread","fetch","sent","json","id","main","sys","stop","_this$state","info","components_form","weatherinfo","Component","ReactDOM","render","containers_Weather","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3f37e42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const Constants = {\n  BASE_PATH: 'https://api.openweathermap.org/data/2.5',\n  WEATHER_PATH: '/weather',\n  WEATHER_PARAM: 'q=',\n  API_ID: 'appid=',\n  API_KEY: 'df382371f71a920bf67ae5a538a05596',\n  UNITS_NAME: 'units=',\n  UNITS_PARAM: 'metric'\n};\n\nexport default Constants;\n","export const kelvinToCelsius = (celsius, round = 1) => (celsius - 273.15).toFixed(round);\n\nexport const timeConversion = sec => {\n  const date = new Date(sec * 1000);\n  const hours = date.getHours();\n  const modifiedMinutes = `0${date.getMinutes()}`;\n  const modifiedSeconds = `0${date.getSeconds()}`;\n  const minutes = modifiedMinutes.substr(-2);\n  const seconds = modifiedSeconds.substr(-2);\n\n  return `${hours}:${minutes}:${seconds}`;\n};\n\nexport const tempConversion = temp => (temp > 0 ? `+${temp}°C` : `${temp}°C`);\n\nexport class initialState {\n  temp = undefined;\n  city = undefined;\n  country = undefined;\n  sunset = undefined;\n  sunrise =  undefined;\n  pressure =  undefined;\n  error =  undefined;\n  loading =  false;\n};\n","import React from 'react';\n\nconst Info = () => (\n\t<div>\n\t\t<h2>Weather in your city</h2>\n\t\t<p>Find out the weather in your city</p>\n\t</div>\n);\n\nexport default Info;\n","import React from 'react';\n\nconst Form = ({ weatherWethod }) => (\n\t<form onSubmit={weatherWethod}>\n\t\t<input type='text' name='city' placeholder='Enter the name of the city...' required />\n\t\t<button type=\"submit\">Get the weather</button>\n\t</form>\n);\n\nexport default Form;\n","import React from 'react';\n\nconst WeatherInfo = ({ city, country, temp, sunset, sunrise, pressure, loading, error }) => (\n \t<div className='infoWeath'>\n \t\t{city &&\n\t \t\t<div>\n \t\t\t\t<p>Area is {city}, {country}</p>\n \t\t\t\t<p>Temperature is {temp}</p>\n \t\t\t\t<p>Sunset is {sunset}</p>\n        <p>Sunrise is {sunrise}</p>\n \t\t\t\t<p>Pressure is {pressure}mm</p>\n \t\t\t</div>\n \t\t}\n    {loading &&\n      <div className='text-center'>\n        <div className='spinner-border' role='status'>\n          <span className='sr-only'>Loading...</span>\n        </div>\n      </div>\n    }\n \t\t<p className='error'>{error}</p>\n \t</div>\n);\n\nexport default WeatherInfo;\n","import React, { Component } from 'react';\nimport Constants from '../constants';\nimport { timeConversion, tempConversion, initialState } from '../utils';\nimport Info from '../components/info';\nimport Form from '../components/form';\nimport WeatherInfo from '../components/weatherinfo';\nimport './css/Weather.css';\n\nconst { BASE_PATH, WEATHER_PATH, WEATHER_PARAM, API_ID, API_KEY, UNITS_NAME, UNITS_PARAM } = Constants;\n\nclass Weather extends Component {\n\n\tstate = {\n\t\t...new initialState()\n\t}\n\n\tgettingWeather = async e => {\n\t\te.preventDefault();\n\t\tconst city = e.target.elements.city.value;\n\n\t\tthis.setState({\n\t\t\t...new initialState(),\n\t\t\tloading: true\n\t\t});\n\n\t\tconst api_url = await fetch(`${BASE_PATH}${WEATHER_PATH}?${WEATHER_PARAM}${city}&${API_ID}${API_KEY}&${UNITS_NAME}${UNITS_PARAM}`);\n\t\tconst data = await api_url.json();\n\n\t\tif (data.id) {\n\t\t\tconst { main: { temp, pressure }, sys: { country, sunset, sunrise }, name } = data;\n\t\t\tconst sunset_date = timeConversion(sunset);\n\t\t\tconst sunrise_date = timeConversion(sunrise);\n\t\t\tconst modified_temp = tempConversion(temp);\n\n\t\t\tthis.setState({\n\t\t\t\t...new initialState(),\n\t\t\t\ttemp: modified_temp,\n\t\t\t\tcity: name,\n\t\t\t\tcountry,\n\t\t\t\tsunrise: sunrise_date,\n\t\t\t\tsunset: sunset_date,\n\t\t\t\tpressure\n\t\t\t});\n\t\t} else {\n\t\t\tconst { message } = data;\n\n\t\t\tthis.setState({\n\t\t\t\t...new initialState(),\n\t\t\t\terror: message\n\t\t\t});\n\t\t}\n\t}\n\n\trender () {\n\t\tconst { loading, temp, city, country, sunset, sunrise, pressure, error } = this.state;\n\n\t\treturn (\n\t\t\t<div className='wrapper'>\n\t\t\t\t<div className='main'>\n\t\t\t\t\t<div className='container'>\n\t\t\t\t\t\t<div className='row'>\n\t\t\t\t\t\t\t<div className='col-sm-5 info'>\n\t\t\t\t\t\t\t\t<Info />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className='col-sm-7 form'>\n\t\t\t\t\t\t\t\t<Form weatherWethod={this.gettingWeather} />\n\n\t\t\t\t\t\t\t\t<WeatherInfo\n\t\t\t\t\t\t\t\t\ttemp={temp}\n\t\t\t\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\t\tsunset={sunset}\n\t\t\t\t\t\t\t\t\tsunrise={sunrise}\n\t\t\t\t\t\t\t\t\tpressure={pressure}\n\t\t\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t\t\terror={error}\n\t\t\t\t\t\t\t\t />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Weather from './containers/Weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<Weather />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}