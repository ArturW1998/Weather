{"version":3,"sources":["serviceWorker.js","utils/index.js","constants/index.js","components/info.js","components/form.js","components/loader.js","components/error.js","components/weatherView.js","components/weatherInfo.js","containers/Weather.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","timeConversion","sec","date","Date","hours","getHours","modifiedMinutes","concat","getMinutes","modifiedSeconds","getSeconds","minutes","substr","seconds","tempConversion","temp","InitialState","Object","classCallCheck","this","undefined","city","country","sunset","sunrise","pressure","loading","Constants","BASE_PATH","WEATHER_PATH","WEATHER_PARAM","API_ID","API_KEY","UNITS_NAME","UNITS_PARAM","Info","react_default","a","createElement","Form","_ref","weatherWethod","onSubmit","type","name","placeholder","required","defaultProps","Loader","className","role","Error","WeatherView","WeatherInfo","weatherView","loader","components_error","Weather","gettingWeather","e","preventDefault","target","elements","value","_this","setState","objectSpread","fetch","res","json","result","settingWeather","gettingError","data","id","_data$main","main","_data$sys","sys","sunsetDate","sunriseDate","modifiedTemp","message","_this$state","info","components_form","weatherInfo","Component","ReactDOM","render","containers_Weather","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c450f530.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable no-console */\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n          /* eslint-enable */\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* eslint-disable no-console */\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable no-console */\n              console.log('Content is cached for offline use.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      /* eslint-disable no-console */\n      console.error('Error during service worker registration:', error);\n      /* eslint-enable */\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable no-console */\n      console.log('No internet connection found. App is running in offline mode.');\n      /* eslint-enable */\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const kelvinToCelsius = (celsius, round = 1) => (celsius - 273.15).toFixed(round);\n\nexport const timeConversion = sec => {\n  const date = new Date(sec * 1000);\n  const hours = date.getHours();\n  const modifiedMinutes = `0${date.getMinutes()}`;\n  const modifiedSeconds = `0${date.getSeconds()}`;\n  const minutes = modifiedMinutes.substr(-2);\n  const seconds = modifiedSeconds.substr(-2);\n\n  return `${hours}:${minutes}:${seconds}`;\n};\n\nexport const tempConversion = temp => (temp > 0 ? `+${temp}°C` : `${temp}°C`);\n\nexport class InitialState {\n  temp = undefined;\n  city = undefined;\n  country = undefined;\n  sunset = undefined;\n  sunrise = undefined;\n  pressure = undefined;\n  error = undefined;\n  loading = false;\n}\n","const Constants = {\n  BASE_PATH: 'https://api.openweathermap.org/data/2.5',\n  WEATHER_PATH: '/weather',\n  WEATHER_PARAM: 'q=',\n  API_ID: 'appid=',\n  API_KEY: 'df382371f71a920bf67ae5a538a05596',\n  UNITS_NAME: 'units=',\n  UNITS_PARAM: 'metric'\n};\n\nexport default Constants;\n","import React from 'react';\n\nconst Info = () => (\n  <div>\n    <h2>Weather in your city</h2>\n    <p>Find out the weather in your city</p>\n  </div>\n);\n\nexport default Info;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ weatherWethod }) => (\n  <form onSubmit={weatherWethod}>\n    <input type=\"text\" name=\"city\" placeholder=\"Enter the name of the city...\" required />\n    <button type=\"submit\">Get the weather</button>\n  </form>\n);\n\nForm.propTypes = {\n  weatherWethod: PropTypes.func\n};\n\nForm.defaultProps = {\n  weatherWethod: () => {}\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Loader = () => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ error }) => <p className=\"error\">{error}</p>;\n\nError.propTypes = {\n  error: PropTypes.string\n};\n\nError.defaultProps = {\n  error: ''\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WeatherView = ({ city, country, temp, sunset, sunrise, pressure }) => (\n  <div>\n    <p>\n      Area is {city}, {country}\n    </p>\n    <p>Temperature is {temp}</p>\n    <p>Sunset is {sunset}</p>\n    <p>Sunrise is {sunrise}</p>\n    <p>Pressure is {pressure}mm</p>\n  </div>\n);\n\nWeatherView.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  temp: PropTypes.string,\n  sunrise: PropTypes.string,\n  sunset: PropTypes.string,\n  pressure: PropTypes.number\n};\n\nWeatherView.defaultProps = {\n  city: '',\n  country: '',\n  temp: '',\n  sunrise: '',\n  sunset: '',\n  pressure: 0\n};\n\nexport default WeatherView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Loader from './loader';\nimport Error from './error';\nimport WeatherView from './weatherView';\n\nconst WeatherInfo = ({ city, country, temp, sunset, sunrise, pressure, loading, error }) => (\n  <div className=\"infoWeath\">\n    {city && <WeatherView city={city} country={country} temp={temp} sunset={sunset} sunrise={sunrise} pressure={pressure} />}\n    {loading && <Loader />}\n    {error && <Error error={error} />}\n  </div>\n);\n\nWeatherInfo.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  temp: PropTypes.string,\n  sunrise: PropTypes.string,\n  sunset: PropTypes.string,\n  pressure: PropTypes.number,\n  loading: PropTypes.bool,\n  error: PropTypes.string\n};\n\nWeatherInfo.defaultProps = {\n  city: '',\n  country: '',\n  temp: '',\n  sunrise: '',\n  sunset: '',\n  pressure: 0,\n  loading: false,\n  error: ''\n};\n\nexport default WeatherInfo;\n","import React, { Component } from 'react';\n\nimport { timeConversion, tempConversion, InitialState } from '../utils';\n\nimport Constants from '../constants';\n\nimport Info from '../components/info';\nimport Form from '../components/form';\nimport WeatherInfo from '../components/weatherInfo';\n\nimport './css/Weather.css';\n\nconst { BASE_PATH, WEATHER_PATH, WEATHER_PARAM, API_ID, API_KEY, UNITS_NAME, UNITS_PARAM } = Constants;\n\nclass Weather extends Component {\n  state = {\n    ...new InitialState()\n  };\n\n  gettingWeather = e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    this.setState({\n      ...new InitialState(),\n      loading: true\n    });\n\n    fetch(`${BASE_PATH}${WEATHER_PATH}?${WEATHER_PARAM}${city}&${API_ID}${API_KEY}&${UNITS_NAME}${UNITS_PARAM}`)\n      .then(res => res.json())\n      .then(result => this.settingWeather(result))\n      .catch(error => this.gettingError(error));\n  };\n\n  settingWeather = data => {\n    if (data.id) {\n      const {\n        main: { temp, pressure },\n        sys: { country, sunset, sunrise },\n        name\n      } = data;\n      const sunsetDate = timeConversion(sunset);\n      const sunriseDate = timeConversion(sunrise);\n      const modifiedTemp = tempConversion(temp);\n\n      this.setState({\n        ...new InitialState(),\n        temp: modifiedTemp,\n        city: name,\n        country,\n        sunrise: sunriseDate,\n        sunset: sunsetDate,\n        pressure\n      });\n    } else {\n      const { message } = data;\n\n      this.gettingError(message);\n    }\n  };\n\n  gettingError = error => {\n    this.setState({\n      ...new InitialState(),\n      error\n    });\n  };\n\n  render() {\n    const { loading, temp, city, country, sunset, sunrise, pressure, error } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n\n              <div className=\"col-sm-7 form\">\n                <Form weatherWethod={this.gettingWeather} />\n\n                <WeatherInfo temp={temp} city={city} country={country} sunset={sunset} sunrise={sunrise} pressure={pressure} loading={loading} error={error} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Weather from './containers/Weather';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\n\nReactDOM.render(<Weather />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}